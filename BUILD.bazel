# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//build/kernel/kleaf:hermetic_tools.bzl", "hermetic_tools")
load("@kernel_toolchain_info//:dict.bzl", "CLANG_VERSION")

hermetic_tools(
    name = "hermetic-tools",
    srcs = glob(
        [
            "build-tools/path/**",
        ],
        allow_empty = False,
    ) + [
        "//prebuilts/clang/host/linux-x86/clang-{}:bin/llvm-strings".format(CLANG_VERSION),
    ],
    host_tools = [
        "bash",
        "install",
        "perl",
        "rsync",
        "sh",
        "tar",
    ],
    tar_args = [
        "--mtime=@0",
        "--owner=0",
        "--group=0",
        "--numeric-owner",
    ],
    visibility = ["//visibility:public"],
    deps = glob(
        ["build-tools/sysroot/**"],
        allow_empty = False,
    ) + [
        "//prebuilts/build-tools:linux-x86",
        "//prebuilts/kernel-build-tools:linux-x86",
        "@prebuilt_ndk//:sysroot",
    ],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
sh_library(
    name = "_setup_env",
    srcs = ["_setup_env.sh"],
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
sh_library(
    name = "build_utils",
    srcs = ["build_utils.sh"],
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
sh_binary(
    name = "abi_compare_to_symbol_list",
    srcs = ["abi/compare_to_symbol_list"],
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
py_binary(
    name = "abi_flatten_symbol_list",
    srcs = ["abi/flatten_symbol_list.py"],
    main = "abi/flatten_symbol_list.py",
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
py_binary(
    name = "abi_process_symbols",
    srcs = ["abi/process_symbols.py"],
    data = [
        "abi/symbols.allow",
        "abi/symbols.deny",
    ],
    main = "abi/process_symbols.py",
    visibility = ["//visibility:public"],
)

py_library(
    name = "abitool",
    srcs = ["abi/abitool.py"],
    visibility = ["//visibility:private"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "dump_abi",
    srcs = ["abi/dump_abi.py"],
    main = "abi/dump_abi.py",
    visibility = ["//visibility:public"],
    deps = [":abitool"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "diff_abi",
    srcs = ["abi/diff_abi.py"],
    main = "abi/diff_abi.py",
    visibility = ["//visibility:public"],
    deps = [":abitool"],
)

py_library(
    name = "symbol_extraction",
    srcs = ["abi/symbol_extraction.py"],
    visibility = ["//visibility:private"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "extract_symbols",
    srcs = ["abi/extract_symbols.py"],
    main = "abi/extract_symbols.py",
    visibility = ["//visibility:public"],
    deps = [":symbol_extraction"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "filter_abi",
    srcs = ["abi/filter_abi.py"],
    main = "abi/filter_abi.py",
    visibility = ["//visibility:public"],
)

_GKI_CERTIFICATION_BINARIES_PREFIX = "//prebuilts/kernel-build-tools:linux-x86/bin/"

_GKI_CERTIFICATION_BINARIES = [
    "avbtool",
    "certify_bootimg",
]

genrule(
    name = "gki_certification_tools",
    srcs = [_GKI_CERTIFICATION_BINARIES_PREFIX + tool for tool in _GKI_CERTIFICATION_BINARIES],
    outs = ["gki_certification_tools.tar.gz"],
    # Set PATH to ensure hermeticity.
    cmd = """
        PATH=$$($(location :hermetic-tools/readlink) -m $$($(location :hermetic-tools/dirname) $(location :hermetic-tools/dirname)))
        tar -czf $@ \\
            -C $$(dirname $$(dirname $(location {prefix}{first}))) \\
            {files}
    """.format(
        files = " ".join(["bin/" + tool for tool in _GKI_CERTIFICATION_BINARIES]),
        first = _GKI_CERTIFICATION_BINARIES[0],
        prefix = _GKI_CERTIFICATION_BINARIES_PREFIX,
    ),
    tools = [
        ":hermetic-tools",
        ":hermetic-tools/dirname",
        ":hermetic-tools/readlink",
    ],
    visibility = ["//visibility:public"],
)
