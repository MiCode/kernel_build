# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//lib:paths.bzl", "paths")
load("@kernel_toolchain_info//:dict.bzl", "VARS")
load("//build/kernel/kleaf:hermetic_tools.bzl", "hermetic_genrule", "hermetic_tools")

filegroup(
    name = "sysroot",
    srcs = glob(
        ["build-tools/sysroot/**"],
        allow_empty = False,
    ),
    visibility = [
        ":__subpackages__",
        "//prebuilts/clang/host/linux-x86/kleaf:__subpackages__",
        "@kleaf_user_clang_toolchain//:__subpackages__",
    ],
)

# TODO(b/274975942): Delete these symlinks once build.sh goes away.
_HERMETIC_TOOLS = [
    # keep sorted
    "build-tools/path/linux-x86/avbtool",
    "build-tools/path/linux-x86/awk",
    "build-tools/path/linux-x86/basename",
    "build-tools/path/linux-x86/bc",
    "build-tools/path/linux-x86/bison",
    "build-tools/path/linux-x86/blk_alloc_to_base_fs",
    "build-tools/path/linux-x86/build_image",
    "build-tools/path/linux-x86/build_super_image",
    "build-tools/path/linux-x86/bzcat",
    "build-tools/path/linux-x86/bzip2",
    "build-tools/path/linux-x86/cat",
    "build-tools/path/linux-x86/certify_bootimg",
    "build-tools/path/linux-x86/chmod",
    "build-tools/path/linux-x86/cmp",
    "build-tools/path/linux-x86/comm",
    "build-tools/path/linux-x86/cp",
    "build-tools/path/linux-x86/cpio",
    "build-tools/path/linux-x86/cut",
    "build-tools/path/linux-x86/date",
    "build-tools/path/linux-x86/dd",
    "build-tools/path/linux-x86/depmod",
    "build-tools/path/linux-x86/diff",
    "build-tools/path/linux-x86/dirname",
    "build-tools/path/linux-x86/dtc",
    "build-tools/path/linux-x86/du",
    "build-tools/path/linux-x86/e2fsck",
    "build-tools/path/linux-x86/e2fsdroid",
    "build-tools/path/linux-x86/echo",
    "build-tools/path/linux-x86/egrep",
    "build-tools/path/linux-x86/env",
    "build-tools/path/linux-x86/expr",
    "build-tools/path/linux-x86/fec",
    "build-tools/path/linux-x86/flex",
    "build-tools/path/linux-x86/getconf",
    "build-tools/path/linux-x86/grep",
    "build-tools/path/linux-x86/head",
    "build-tools/path/linux-x86/hostname",
    "build-tools/path/linux-x86/id",
    "build-tools/path/linux-x86/img2simg",
    "build-tools/path/linux-x86/install",
    "build-tools/path/linux-x86/interceptor",
    "build-tools/path/linux-x86/interceptor_analysis",
    "build-tools/path/linux-x86/ln",
    "build-tools/path/linux-x86/lpmake",
    "build-tools/path/linux-x86/ls",
    "build-tools/path/linux-x86/lz4",
    "build-tools/path/linux-x86/m4",
    "build-tools/path/linux-x86/make",
    "build-tools/path/linux-x86/md5sum",
    "build-tools/path/linux-x86/mkbootfs",
    "build-tools/path/linux-x86/mkdir",
    "build-tools/path/linux-x86/mkdtimg",
    "build-tools/path/linux-x86/mke2fs",
    "build-tools/path/linux-x86/mkfs.erofs",
    "build-tools/path/linux-x86/mktemp",
    "build-tools/path/linux-x86/mkuserimg_mke2fs",
    "build-tools/path/linux-x86/modinfo",
    "build-tools/path/linux-x86/mv",
    "build-tools/path/linux-x86/nproc",
    "build-tools/path/linux-x86/od",
    "build-tools/path/linux-x86/openssl",
    "build-tools/path/linux-x86/pahole",
    "build-tools/path/linux-x86/paste",
    "build-tools/path/linux-x86/pgrep",
    "build-tools/path/linux-x86/pkill",
    "build-tools/path/linux-x86/ps",
    "build-tools/path/linux-x86/pwd",
    "build-tools/path/linux-x86/readlink",
    "build-tools/path/linux-x86/realpath",
    "build-tools/path/linux-x86/rm",
    "build-tools/path/linux-x86/rmdir",
    "build-tools/path/linux-x86/runextractor",
    "build-tools/path/linux-x86/sed",
    "build-tools/path/linux-x86/seq",
    "build-tools/path/linux-x86/setsid",
    "build-tools/path/linux-x86/sha1sum",
    "build-tools/path/linux-x86/sha256sum",
    "build-tools/path/linux-x86/sha512sum",
    "build-tools/path/linux-x86/simg2img",
    "build-tools/path/linux-x86/sleep",
    "build-tools/path/linux-x86/soong_zip",
    "build-tools/path/linux-x86/sort",
    "build-tools/path/linux-x86/stat",
    "build-tools/path/linux-x86/stgdiff",
    "build-tools/path/linux-x86/swig",
    "build-tools/path/linux-x86/tail",
    "build-tools/path/linux-x86/tee",
    "build-tools/path/linux-x86/test",
    "build-tools/path/linux-x86/timeout",
    "build-tools/path/linux-x86/touch",
    "build-tools/path/linux-x86/tr",
    "build-tools/path/linux-x86/true",
    "build-tools/path/linux-x86/truncate",
    "build-tools/path/linux-x86/tune2fs",
    "build-tools/path/linux-x86/ufdt_apply_overlay",
    "build-tools/path/linux-x86/uname",
    "build-tools/path/linux-x86/uniq",
    "build-tools/path/linux-x86/unix2dos",
    "build-tools/path/linux-x86/unzip",
    "build-tools/path/linux-x86/wc",
    "build-tools/path/linux-x86/which",
    "build-tools/path/linux-x86/whoami",
    "build-tools/path/linux-x86/xargs",
    "build-tools/path/linux-x86/xxd",
    "build-tools/path/linux-x86/xz",
    "build-tools/path/linux-x86/xzcat",
    "build-tools/path/linux-x86/zipinfo",
    "//prebuilts/clang/host/linux-x86/clang-{}:bin/llvm-strings".format(VARS["CLANG_VERSION"]),
] + glob([
    # Intentionally glob here to test for existance of alias destination
    # buildifier: disable=constant-glob
    "build-tools/path/linux-x86/cxx_extractor",
])

# DO NOT ADD MORE TO THIS LIST.
# The duplication of items in this list and other fields in hermetic-tools is
# intentional. These aliases are deprecated but kept for backwards
# compatibility.
# Existing users of individual tools are advised to migrate to
# hermetic_toolchain or hermetic_genrule.
_DEPRECATED_DO_NOT_ADD_MORE_ALIASES = [
    # keep sorted
    "avbtool",
    "awk",
    "basename",
    "bash",
    "bc",
    "bison",
    "blk_alloc_to_base_fs",
    "build_image",
    "build_super_image",
    "bzcat",
    "bzip2",
    "cat",
    "certify_bootimg",
    "chmod",
    "cmp",
    "comm",
    "cp",
    "cpio",
    "cut",
    "cxx_extractor",
    "date",
    "dd",
    "depmod",
    "diff",
    "dirname",
    "dtc",
    "du",
    "e2fsck",
    "e2fsdroid",
    "echo",
    "egrep",
    "env",
    "expr",
    "fec",
    "find",
    "flex",
    "getconf",
    "grep",
    "gzip",
    "head",
    "hostname",
    "id",
    "img2simg",
    "install",
    "interceptor",
    "interceptor_analysis",
    "llvm-strings",
    "ln",
    "lpmake",
    "ls",
    "lz4",
    "m4",
    "make",
    "md5sum",
    "mkbootfs",
    "mkdir",
    "mkdtimg",
    "mke2fs",
    "mkfs.erofs",
    "mktemp",
    "mkuserimg_mke2fs",
    "modinfo",
    "mv",
    "nproc",
    "od",
    "openssl",
    "pahole",
    "paste",
    "perl",
    "pgrep",
    "pkill",
    "ps",
    "pwd",
    "python",
    "python3",
    "readlink",
    "realpath",
    "rm",
    "rmdir",
    "rsync",
    "runextractor",
    "sed",
    "seq",
    "setsid",
    "sh",
    "sha1sum",
    "sha256sum",
    "sha512sum",
    "simg2img",
    "sleep",
    "soong_zip",
    "sort",
    "stat",
    "stgdiff",
    "swig",
    "tail",
    "tar",
    "tee",
    "test",
    "timeout",
    "touch",
    "tr",
    "true",
    "truncate",
    "tune2fs",
    "ufdt_apply_overlay",
    "uname",
    "uniq",
    "unix2dos",
    "unzip",
    "wc",
    "which",
    "whoami",
    "xargs",
    "xxd",
    "xz",
    "xzcat",
    "zipinfo",
]

# Hermetic tools symlinks (other than _HERMETIC_TOOLS)
_ADDITIONAL_TOYS = [
    # Real tar binary that shouldn't be used directly
    "kleaf_internal_do_not_use/tar",
]

# Hacks to allow duplicate keys in hermetic_tools.symlinks.
# This can't be an alias because it resolves to the same target during
# analysis phase.
filegroup(
    name = "hermetic_tools_toybox_flock_alias",
    srcs = ["//prebuilts/build-tools:linux-x86/bin/toybox"],
    visibility = ["//visibility:private"],
)

hermetic_tools(
    name = "hermetic-tools",
    aliases = _DEPRECATED_DO_NOT_ADD_MORE_ALIASES,
    symlinks = select({
        "//build/kernel/kleaf:debug_cache_dir_conflict_needs_flock": {
            ":hermetic_tools_toybox_flock_alias": "flock",
        },
        "//conditions:default": {},
    }) | select({
        "//build/kernel/kleaf:workaround_btrfs_b292212788_is_true": {
            "@kleaf_host_tools//:find": "find",
        },
        "//conditions:default": {
            "build-tools/path/linux-x86/find": "find",
        },
    }) | select({
        "//build/kernel/kleaf:gzip_is_pigz_is_true": {
            "@pigz": "gzip",
        },
        "//conditions:default": {
            "build-tools/path/linux-x86/gzip": "gzip",
        },
    }) | {
        "//prebuilts/build-tools:linux-x86/bin/toybox": ":".join(_ADDITIONAL_TOYS),

        # Host tools
        "@kleaf_host_tools//:bash": "bash",
        "@kleaf_host_tools//:sh": "sh",
        "@kleaf_host_tools//:perl": "perl",

        # Real rsync that shouldn't be used directly
        "@kleaf_host_tools//:rsync": "kleaf_internal_do_not_use/rsync",
        # Embed additional args that calls kleaf_internal_do_not_use/rsync
        "build-tools/kleaf_internal_do_not_use_path/linux-x86/rsync": "rsync",

        # Embeds additional args that calls kleaf_internal_do_not_use/tar
        "build-tools/kleaf_internal_do_not_use_path/linux-x86/tar": "tar",

        # Python
        "//build/kernel/kleaf/impl:python_interpreter_file": ":".join([
            # keep sorted
            "python",
            "python3",
        ]),
    } | {
        tool: paths.basename(package_relative_label(tool).name)
        for tool in _HERMETIC_TOOLS
    },
    visibility = ["//visibility:public"],
    deps = [
        ":sysroot",
        "//build/kernel/kleaf/impl:python_runtime_files",
        "//prebuilts/build-tools:linux-x86",
        "//prebuilts/kernel-build-tools:linux-x86",
        "@prebuilt_ndk//:sysroot",
    ],
)

toolchain_type(
    name = "hermetic_tools_toolchain_type",
    visibility = ["//visibility:private"],
)

toolchain(
    name = "hermetic_tools_toolchain",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    toolchain = ":hermetic-tools",
    toolchain_type = ":hermetic_tools_toolchain_type",
    visibility = ["//visibility:private"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
sh_library(
    name = "_setup_env",
    srcs = ["_setup_env.sh"],
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
sh_library(
    name = "build_utils",
    srcs = ["build_utils.sh"],
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
py_binary(
    name = "abi_verify_ksymtab",
    srcs = ["abi/verify_ksymtab.py"],
    main = "abi/verify_ksymtab.py",
    visibility = ["//visibility:public"],
    deps = [":symbol_extraction"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
py_binary(
    name = "abi_flatten_symbol_list",
    srcs = ["abi/flatten_symbol_list.py"],
    main = "abi/flatten_symbol_list.py",
    visibility = ["//visibility:public"],
)

# Tools visible to all packages that uses kernel_build.
# Implementation detail of kernel_build; do not use directly.
py_binary(
    name = "abi_process_symbols",
    srcs = ["abi/process_symbols.py"],
    data = [
        "abi/symbols.allow",
        "abi/symbols.deny",
    ],
    main = "abi/process_symbols.py",
    visibility = ["//visibility:public"],
)

py_library(
    name = "symbol_extraction",
    srcs = ["abi/symbol_extraction.py"],
    imports = ["abi"],
    visibility = ["//visibility:private"],
)

# Tools visible to all packages that uses kernel_abi
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "check_buildtime_symbol_protection",
    srcs = ["abi/check_buildtime_symbol_protection.py"],
    main = "abi/check_buildtime_symbol_protection.py",
    visibility = ["//visibility:public"],
    deps = [":symbol_extraction"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "extract_symbols",
    srcs = ["abi/extract_symbols.py"],
    main = "abi/extract_symbols.py",
    visibility = ["//visibility:public"],
    deps = [":symbol_extraction"],
)

# Tools visible to all packages that uses kernel_abi.
# Implementation detail of kernel_abi; do not use directly.
py_binary(
    name = "extract_protected_exports",
    srcs = ["abi/extract_gki_protected_exports.py"],
    main = "abi/extract_gki_protected_exports.py",
    visibility = ["//visibility:public"],
    deps = [":symbol_extraction"],
)

_GKI_CERTIFICATION_BINARIES_PREFIX = "//prebuilts/kernel-build-tools:linux-x86/bin/"

_GKI_CERTIFICATION_BINARIES = [
    "avbtool",
    "certify_bootimg",
]

hermetic_genrule(
    name = "gki_certification_tools",
    srcs = [_GKI_CERTIFICATION_BINARIES_PREFIX + tool for tool in _GKI_CERTIFICATION_BINARIES],
    outs = ["gki_certification_tools.tar.gz"],
    cmd = """
        tar -czhf $@ \\
            -C $$(dirname $$(dirname $(location {prefix}{first}))) \\
            {files}
    """.format(
        files = " ".join(["bin/" + tool for tool in _GKI_CERTIFICATION_BINARIES]),
        first = _GKI_CERTIFICATION_BINARIES[0],
        prefix = _GKI_CERTIFICATION_BINARIES_PREFIX,
    ),
    visibility = ["//visibility:public"],
)
